Part(C):

Algorithm TailTetranacci(n)
Input: value of n for which we need to find
	   the corresponding tetranacci value
Output: tetranacci value of tail recursion
Start:

if (n<0) then print("Invalid Argument")
int[] A = {0,0,0,1}
return tetranacciRecursive(n,A)


method tetranacciRecursive(n,A)
if (n<4) then return A[n]
sum = A[0] + A[1] + A[2] + A[3]
for i=0 to 3 do{
A[i] = A[i+1]
}
A[3] = sum
return tetranacciRecursive(n-1,A)

End


#Observations:

As we can see the tail tetranacci output text results in 4761ns 
for the execution of 5 elements and goes up until 7741ns for 50 elements 
which is quite fast considering what happened with the exponential 
tetranacci algorithm 